//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DFIS.EntitiesDAL.EDMX
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DFISContextDB : DbContext
    {
        public DFISContextDB()
            : base("name=DFISContextDB")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MasterDynamicField> MasterDynamicFields { get; set; }
        public virtual DbSet<MasterFunction> MasterFunctions { get; set; }
        public virtual DbSet<MasterList> MasterLists { get; set; }
        public virtual DbSet<GenBuildingFacility> GenBuildingFacilities { get; set; }
        public virtual DbSet<tm_location> tm_location { get; set; }
        public virtual DbSet<MasterConfiguration> MasterConfigurations { get; set; }
        public virtual DbSet<MasterConfigurationEmail> MasterConfigurationEmails { get; set; }
        public virtual DbSet<TransactionLog> TransactionLogs { get; set; }
        public virtual DbSet<MasterUser> MasterUsers { get; set; }
        public virtual DbSet<MasterConvertionPointSS> MasterConvertionPointSSes { get; set; }
        public virtual DbSet<MasterRole> MasterRoles { get; set; }
        public virtual DbSet<MasterRolesFunctionMapping> MasterRolesFunctionMappings { get; set; }
        public virtual DbSet<MasterUserLocationMapping> MasterUserLocationMappings { get; set; }
        public virtual DbSet<MasterUserRoleMapping> MasterUserRoleMappings { get; set; }
        public virtual DbSet<MasterEquipmentType> MasterEquipmentTypes { get; set; }
        public virtual DbSet<MasterHoliday> MasterHolidays { get; set; }
        public virtual DbSet<MasterIconFacility> MasterIconFacilities { get; set; }
        public virtual DbSet<MasterTransportRegion> MasterTransportRegions { get; set; }
        public virtual DbSet<NotificationSystem> NotificationSystems { get; set; }
        public virtual DbSet<UserRolesSecurityView> UserRolesSecurityViews { get; set; }
        public virtual DbSet<KPIInputSVView> KPIInputSVViews { get; set; }
        public virtual DbSet<KPIInventoryAccuracy> KPIInventoryAccuracies { get; set; }
        public virtual DbSet<KPIDistributionCostSV> KPIDistributionCostSVs { get; set; }
        public virtual DbSet<KPIProductivityDetail> KPIProductivityDetails { get; set; }
        public virtual DbSet<GeneralContImproveSandBag> GeneralContImproveSandBags { get; set; }
        public virtual DbSet<KPIInventoryAccuracyView> KPIInventoryAccuracyViews { get; set; }
        public virtual DbSet<KPIDistributionCost> KPIDistributionCosts { get; set; }
        public virtual DbSet<KPITotalRecordableInjury> KPITotalRecordableInjuries { get; set; }
        public virtual DbSet<MasterMapping> MasterMappings { get; set; }
        public virtual DbSet<KPIDistributionCostView> KPIDistributionCostViews { get; set; }
        public virtual DbSet<MasterFABrand> MasterFABrands { get; set; }
        public virtual DbSet<MasterLoadFactorCFP> MasterLoadFactorCFPs { get; set; }
        public virtual DbSet<KPIInventoryRegionAccuracyView> KPIInventoryRegionAccuracyViews { get; set; }
        public virtual DbSet<MasterKPIColorSummary> MasterKPIColorSummaries { get; set; }
        public virtual DbSet<KPIOvertimeAboveRegulation> KPIOvertimeAboveRegulations { get; set; }
        public virtual DbSet<KPIOvertime> KPIOvertimes { get; set; }
        public virtual DbSet<MasterRoleFunctionTreeListView> MasterRoleFunctionTreeListViews { get; set; }
        public virtual DbSet<MasterUserLocationMapTreeListView> MasterUserLocationMapTreeListViews { get; set; }
        public virtual DbSet<GeneralRecognitionHistory> GeneralRecognitionHistories { get; set; }
        public virtual DbSet<KPIUploadedEmployee> KPIUploadedEmployees { get; set; }
        public virtual DbSet<KPISummaryReport> KPISummaryReports { get; set; }
        public virtual DbSet<NewsHighlight> NewsHighlights { get; set; }
        public virtual DbSet<MasterGuideline> MasterGuidelines { get; set; }
        public virtual DbSet<GeneralSafeIntegration> GeneralSafeIntegrations { get; set; }
        public virtual DbSet<WarehouseTempHumidity> WarehouseTempHumidities { get; set; }
        public virtual DbSet<MasterLocation> MasterLocations { get; set; }
        public virtual DbSet<TransportVehicleData> TransportVehicleDatas { get; set; }
        public virtual DbSet<KPIProductivity> KPIProductivities { get; set; }
        public virtual DbSet<GeneralBuildingFacilityDetail> GeneralBuildingFacilityDetails { get; set; }
        public virtual DbSet<KPISugestionSystemView> KPISugestionSystemViews { get; set; }
        public virtual DbSet<GeneralBuildingFacility> GeneralBuildingFacilities { get; set; }
        public virtual DbSet<General5SMonitoring> General5SMonitoring { get; set; }
        public virtual DbSet<KPIVehicleDeliveryProcess> KPIVehicleDeliveryProcesses { get; set; }
        public virtual DbSet<KPIVehicleDeliveryProcessView> KPIVehicleDeliveryProcessViews { get; set; }
        public virtual DbSet<TransportDriverManagement> TransportDriverManagements { get; set; }
        public virtual DbSet<WarehouseBeetleMonitoring> WarehouseBeetleMonitorings { get; set; }
        public virtual DbSet<TransportLostClaimFACode> TransportLostClaimFACodes { get; set; }
        public virtual DbSet<TransportLostClaimUploadBox> TransportLostClaimUploadBoxes { get; set; }
        public virtual DbSet<BuildingFacilityListView> BuildingFacilityListViews { get; set; }
        public virtual DbSet<WarehouseSealStock> WarehouseSealStocks { get; set; }
        public virtual DbSet<WarehouseSealManagement> WarehouseSealManagements { get; set; }
        public virtual DbSet<MasterGenWeek> MasterGenWeeks { get; set; }
        public virtual DbSet<MasterZoneLocation> MasterZoneLocations { get; set; }
        public virtual DbSet<TransportLostClaimDamage> TransportLostClaimDamages { get; set; }
        public virtual DbSet<CustomReportState> CustomReportStates { get; set; }
        public virtual DbSet<WarehouseStockForecast> WarehouseStockForecasts { get; set; }
        public virtual DbSet<KPILoadFactorCFP> KPILoadFactorCFPs { get; set; }
        public virtual DbSet<HRD_EMP_V2> HRD_EMP_V2 { get; set; }
        public virtual DbSet<MasterLeadTime> MasterLeadTimes { get; set; }
        public virtual DbSet<MasterMappingLocationPercentage> MasterMappingLocationPercentages { get; set; }
        public virtual DbSet<GeneralBuildingFacilityView> GeneralBuildingFacilityViews { get; set; }
        public virtual DbSet<MasterFGStacking> MasterFGStackings { get; set; }
        public virtual DbSet<GPDetail> GPDetails { get; set; }
        public virtual DbSet<GPHeader> GPHeaders { get; set; }
        public virtual DbSet<SJDetail> SJDetails { get; set; }
        public virtual DbSet<GeneralContImprovSS> GeneralContImprovSSes { get; set; }
        public virtual DbSet<GeneralBuildingFacilityIcon> GeneralBuildingFacilityIcons { get; set; }
        public virtual DbSet<GeneralBuildingFacilityImage> GeneralBuildingFacilityImages { get; set; }
        public virtual DbSet<GeneralBuildingFacilityMap> GeneralBuildingFacilityMaps { get; set; }
        public virtual DbSet<KPILoadFactorPercentage> KPILoadFactorPercentages { get; set; }
        public virtual DbSet<KPIOvertimeTotalEmp> KPIOvertimeTotalEmps { get; set; }
        public virtual DbSet<SchemaVersion> SchemaVersions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TransportSealNumber> TransportSealNumbers { get; set; }
        public virtual DbSet<TransportUnitFrequentData> TransportUnitFrequentDatas { get; set; }
        public virtual DbSet<WarehouseStockDetail> WarehouseStockDetails { get; set; }
        public virtual DbSet<tm_location_item> tm_location_item { get; set; }
        public virtual DbSet<MasterVendor> MasterVendors { get; set; }
        public virtual DbSet<LoadUnloadSealDetail> LoadUnloadSealDetails { get; set; }
        public virtual DbSet<TransportLoadingUnloading> TransportLoadingUnloadings { get; set; }
        public virtual DbSet<WarehouseStockDetailSalesPlan> WarehouseStockDetailSalesPlans { get; set; }
        public virtual DbSet<WarehouseStockForecastSalesPlan> WarehouseStockForecastSalesPlans { get; set; }
        public virtual DbSet<TransportTicketNCR> TransportTicketNCRs { get; set; }
        public virtual DbSet<TransportVesselMonitoring> TransportVesselMonitorings { get; set; }
        public virtual DbSet<TransportVesselMonitoringDetail> TransportVesselMonitoringDetails { get; set; }
        public virtual DbSet<MasterKilometer> MasterKilometers { get; set; }
        public virtual DbSet<TransportTruckArrival> TransportTruckArrivals { get; set; }
        public virtual DbSet<tm_location_detail> tm_location_detail { get; set; }
        public virtual DbSet<TransportLoadingUnloadingDetail> TransportLoadingUnloadingDetails { get; set; }
        public virtual DbSet<WarehouseStockCount> WarehouseStockCounts { get; set; }
        public virtual DbSet<WarehouseStockCountDetail> WarehouseStockCountDetails { get; set; }
        public virtual DbSet<StockCountByLoc> StockCountByLocs { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<GET_OVERTIME_CALCULATION_Result> GET_OVERTIME_CALCULATION(Nullable<int> paramYear, string paramRegion)
        {
            var paramYearParameter = paramYear.HasValue ?
                new ObjectParameter("paramYear", paramYear) :
                new ObjectParameter("paramYear", typeof(int));
    
            var paramRegionParameter = paramRegion != null ?
                new ObjectParameter("paramRegion", paramRegion) :
                new ObjectParameter("paramRegion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_OVERTIME_CALCULATION_Result>("GET_OVERTIME_CALCULATION", paramYearParameter, paramRegionParameter);
        }
    
        public virtual int KPIOvertime_CalcAboveRegulation(Nullable<int> paramYear, Nullable<int> paramMonth, string userName)
        {
            var paramYearParameter = paramYear.HasValue ?
                new ObjectParameter("paramYear", paramYear) :
                new ObjectParameter("paramYear", typeof(int));
    
            var paramMonthParameter = paramMonth.HasValue ?
                new ObjectParameter("paramMonth", paramMonth) :
                new ObjectParameter("paramMonth", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KPIOvertime_CalcAboveRegulation", paramYearParameter, paramMonthParameter, userNameParameter);
        }
    
        public virtual ObjectResult<KPIOvertime_GetOvertimeCalculation_Result> KPIOvertime_GetOvertimeCalculation(Nullable<int> paramYear, string paramRegion)
        {
            var paramYearParameter = paramYear.HasValue ?
                new ObjectParameter("paramYear", paramYear) :
                new ObjectParameter("paramYear", typeof(int));
    
            var paramRegionParameter = paramRegion != null ?
                new ObjectParameter("paramRegion", paramRegion) :
                new ObjectParameter("paramRegion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KPIOvertime_GetOvertimeCalculation_Result>("KPIOvertime_GetOvertimeCalculation", paramYearParameter, paramRegionParameter);
        }
    
        public virtual ObjectResult<KPIProductivityList_Result> KPIProductivityList(Nullable<int> monthFParam, Nullable<int> monthTParam, Nullable<int> tahun, string activeParam)
        {
            var monthFParamParameter = monthFParam.HasValue ?
                new ObjectParameter("monthFParam", monthFParam) :
                new ObjectParameter("monthFParam", typeof(int));
    
            var monthTParamParameter = monthTParam.HasValue ?
                new ObjectParameter("monthTParam", monthTParam) :
                new ObjectParameter("monthTParam", typeof(int));
    
            var tahunParameter = tahun.HasValue ?
                new ObjectParameter("tahun", tahun) :
                new ObjectParameter("tahun", typeof(int));
    
            var activeParamParameter = activeParam != null ?
                new ObjectParameter("activeParam", activeParam) :
                new ObjectParameter("activeParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KPIProductivityList_Result>("KPIProductivityList", monthFParamParameter, monthTParamParameter, tahunParameter, activeParamParameter);
        }
    
        [DbFunction("DFISContextDB", "KPIDistributionCostViewSummary")]
        public virtual IQueryable<KPIDistributionCostViewSummary_Result> KPIDistributionCostViewSummary(string filterMonth, Nullable<int> filterYear, string generateType)
        {
            var filterMonthParameter = filterMonth != null ?
                new ObjectParameter("filterMonth", filterMonth) :
                new ObjectParameter("filterMonth", typeof(string));
    
            var filterYearParameter = filterYear.HasValue ?
                new ObjectParameter("filterYear", filterYear) :
                new ObjectParameter("filterYear", typeof(int));
    
            var generateTypeParameter = generateType != null ?
                new ObjectParameter("generateType", generateType) :
                new ObjectParameter("generateType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<KPIDistributionCostViewSummary_Result>("[DFISContextDB].[KPIDistributionCostViewSummary](@filterMonth, @filterYear, @generateType)", filterMonthParameter, filterYearParameter, generateTypeParameter);
        }
    
        public virtual ObjectResult<KPITotalRecordableInjuryList_Result> KPITotalRecordableInjuryList(Nullable<int> monthFParam, Nullable<int> monthTParam, Nullable<int> tahun, string activeParam)
        {
            var monthFParamParameter = monthFParam.HasValue ?
                new ObjectParameter("monthFParam", monthFParam) :
                new ObjectParameter("monthFParam", typeof(int));
    
            var monthTParamParameter = monthTParam.HasValue ?
                new ObjectParameter("monthTParam", monthTParam) :
                new ObjectParameter("monthTParam", typeof(int));
    
            var tahunParameter = tahun.HasValue ?
                new ObjectParameter("tahun", tahun) :
                new ObjectParameter("tahun", typeof(int));
    
            var activeParamParameter = activeParam != null ?
                new ObjectParameter("activeParam", activeParam) :
                new ObjectParameter("activeParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KPITotalRecordableInjuryList_Result>("KPITotalRecordableInjuryList", monthFParamParameter, monthTParamParameter, tahunParameter, activeParamParameter);
        }
    
        public virtual ObjectResult<GenBudgetMonitoring_Result> GenBudgetMonitoring(Nullable<int> filterMonthFrom, Nullable<int> filterMonthTO, Nullable<int> filterYearFrom, Nullable<int> filterYearTo, string filterType)
        {
            var filterMonthFromParameter = filterMonthFrom.HasValue ?
                new ObjectParameter("FilterMonthFrom", filterMonthFrom) :
                new ObjectParameter("FilterMonthFrom", typeof(int));
    
            var filterMonthTOParameter = filterMonthTO.HasValue ?
                new ObjectParameter("FilterMonthTO", filterMonthTO) :
                new ObjectParameter("FilterMonthTO", typeof(int));
    
            var filterYearFromParameter = filterYearFrom.HasValue ?
                new ObjectParameter("FilterYearFrom", filterYearFrom) :
                new ObjectParameter("FilterYearFrom", typeof(int));
    
            var filterYearToParameter = filterYearTo.HasValue ?
                new ObjectParameter("FilterYearTo", filterYearTo) :
                new ObjectParameter("FilterYearTo", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenBudgetMonitoring_Result>("GenBudgetMonitoring", filterMonthFromParameter, filterMonthTOParameter, filterYearFromParameter, filterYearToParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<GenBudgetMonitoringPivot_Result> GenBudgetMonitoringPivot(Nullable<int> filterMonthFrom, Nullable<int> filterMonthTO, Nullable<int> filterYearFrom, Nullable<int> filterYearTo, string filterType)
        {
            var filterMonthFromParameter = filterMonthFrom.HasValue ?
                new ObjectParameter("FilterMonthFrom", filterMonthFrom) :
                new ObjectParameter("FilterMonthFrom", typeof(int));
    
            var filterMonthTOParameter = filterMonthTO.HasValue ?
                new ObjectParameter("FilterMonthTO", filterMonthTO) :
                new ObjectParameter("FilterMonthTO", typeof(int));
    
            var filterYearFromParameter = filterYearFrom.HasValue ?
                new ObjectParameter("FilterYearFrom", filterYearFrom) :
                new ObjectParameter("FilterYearFrom", typeof(int));
    
            var filterYearToParameter = filterYearTo.HasValue ?
                new ObjectParameter("FilterYearTo", filterYearTo) :
                new ObjectParameter("FilterYearTo", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenBudgetMonitoringPivot_Result>("GenBudgetMonitoringPivot", filterMonthFromParameter, filterMonthTOParameter, filterYearFromParameter, filterYearToParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<GenTransportUnitFreq_Result> GenTransportUnitFreq(Nullable<int> day, Nullable<int> month, Nullable<int> year)
        {
            var dayParameter = day.HasValue ?
                new ObjectParameter("day", day) :
                new ObjectParameter("day", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenTransportUnitFreq_Result>("GenTransportUnitFreq", dayParameter, monthParameter, yearParameter);
        }
    
        public virtual int CalculateWarehouseStockCount(Nullable<int> iDStockCount)
        {
            var iDStockCountParameter = iDStockCount.HasValue ?
                new ObjectParameter("IDStockCount", iDStockCount) :
                new ObjectParameter("IDStockCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateWarehouseStockCount", iDStockCountParameter);
        }
    }
}
