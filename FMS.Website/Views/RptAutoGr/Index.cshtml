@using FMS.Core
@model FMS.Website.Models.RptAutoGrModel

<div class="opt-content clearfloat">
    <h5 class="title-page">Auto GR Report</h5>
    @*<a href="@Url.Action("Upload", "MstEpaf")" class="btn btn-primary line" title="Upload & View" ng-click="uploadCom()">
            <i class="fa fa-download"></i> Import
        </a>*@
    @if (Model.CurrentPageAccess.ReadAccess == true)
    {
        <a href="#!" class="btn btn-primary line" id="btnExport" title="Export To Excel" onclick="ExportXls()">
            <i class="fa fa-upload"></i> Export
        </a>
    }

</div>
<section class="content">
    <div class="wpanel">
        <div class="row col-md-12">
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">Period Start</label>
                    <div class="input-group date">
                        @Html.TextBoxFor(model => model.PeriodStart, "{0:dd-MMM-yyyy}", new { @class = "form-control " })
                        <span class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">Period End</label>
                    <div class="input-group date">
                        @Html.TextBoxFor(model => model.PeriodEnd, "{0:dd-MMM-yyyy}", new { @class = "form-control " })
                        <span class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">PO Number</label>
                    @Html.TextBoxFor(model => model.PONumber, new { @class = "form-control " })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">PO Line</label>
                    @Html.TextBoxFor(model => model.POLine, new { @class = "form-control " })
                </div>
            </div>
            <div class="clearfix"></div>
            <div class="col-md-12">
                <button id="btn-filter" type="button" class="btn btn-primary">Filter</button>
                <button id="btn-reset" type="button" class="btn btn-default">Reset</button>
            </div>
        </div>
    </div>
    <div id="contenttable" class="wpanel">
        @Html.Partial("_ListAutoGr")
        @Html.HiddenFor(m => m.CurrentPage)
    </div>
</section>
<div id="LoadingModal" class="modal" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <div align="center">
                    <img src="~/Content/img/loader2.gif" id="imgLoader" style="display:block" />
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
<script type="text/javascript">
    function setupColumns() {
        var columns = [
            { "data": "PoNumber", "orderable": false },
            { "data": "PoLine", "orderable": false },
            { "data": "GrDateString", "orderable": false },
            { "data": "PoliceNumber", "orderable": false },
            {
                "data": "StartContract", "orderable": true, "render": function (datum, type, record) {
                    return (datum) ? moment(datum).format("DD-MMM-YYYY") : "";
                }
            },
            {
                "data": "EndContract", "orderable": true, "render": function (datum, type, record) {
                    return (datum) ? moment(datum).format("DD-MMM-YYYY") : "";
                }
            },
            {
                "data": "TerminationDate", "orderable": true, "render": function (datum, type, record) {
                    return (datum) ? moment(datum).format("DD-MMM-YYYY") : "";
                }
            },
            { 
                "data": "QtyAutoGr", "orderable": false , "render": function (datum, type, record) {
                    return (datum) ? datum : "";
                }
            },
            { 
                "data": "QtyRemaining", "orderable": false , "render": function (datum, type, record) {
                    return (datum) ? datum : "";
                }
            }
        ];

        return columns;
    }
    function setupDataTables() {
        var actionHtml = '';
        var table = null;
        if ($.fn.dataTable.isDataTable('#tbEpaf')) {
            table = $('#tbEpaf').DataTable();
            table.destroy();
        }

        var WriteAccess = @Model.WriteAccess;
        var ReadAccess = @Model.ReadAccess;

        table = $('#tbEpaf').DataTable({
            "sDom": 'lf<"table-overflow"t>pi',
            "sPaginationType": "full_numbers",
            "language": {
                "zeroRecords": "No records found",
                "infoFiltered": "(filtered from _MAX_ total records)"
            },
            "serverSide": true,
            "stateSave": true,
            //"processing": true,
            "paging": true,
            "deferRender": true,
            "columns": setupColumns(),
            "ajax": {
                "url": "@Url.Action("SearchAutoGrAjax", "RptAutoGr")",
            "type": "POST",
            "data": function(d) {
                return $.extend({}, d, {
                    "PeriodStart": $('#PeriodStart').val(),
                    "PeriodEnd": $('#PeriodEnd').val(),
                    "PONumber": $('#PONumber').val(),
                    "POLine": $('#POLine').val()
                });
            },
            "beforeSend": function () {
                $('#LoadingModal').show();
            },
            "error": function (jqhxr) {
                console.log("ERROR");
                console.log(jqhxr.responseText);
                $('#LoadingModal').hide();
            }    
        }
        });
    table.on('preXhr', function(e, settings, data) {
        $('#LoadingModal').show();
    });

    table.on('xhr', function(e, settings, data) {
        $('#LoadingModal').hide();
    });
    $('#LoadingModal').hide();
    }
    function LoadingShow() {
        $('#LoadingModal').show();
    }
    function LoadingHide() {
        $('#LoadingModal').hide();
    }
    function ExportXls() {
        console.log('Submitting');
        var url = '@Url.Action("ExportAutoGrReportGenerateReport", "RptAutoGr")';
        var getFileUrl = '@Url.Action("GetExcelFile", "RptAutoGr")';
        console.log(url);
        var objToUpload =
			{
			    PeriodStart: $('#PeriodStart').val(),
			    PeriodEnd: $('#PeriodEnd').val(),
			    PONumber: $('#PONumber').val(),
                POLine: $('#POLine').val()
			};
        $.ajax({
            url: url,
            data: JSON.stringify(objToUpload),
            contentType: 'application/json; charset=utf-8',
            beforeSend: function () {
                $('#LoadingModal').show();
            },
            success: function (response, status, jqxhr) {
                console.log("DONE");
                window.location = getFileUrl + "?pathFile=" + response;
                $('#LoadingModal').hide();
            },
            error: function (jqhxr) {
                console.log("ERROR");
                console.log(jqhxr.responseText);
                $('#LoadingModal').hide();
            },
            type: 'POST'
        });

    }

    $(function () {
        $('#AutoGrParent').removeClass('collapse');
        if ($('.title-page').html() == 'Auto GR Report') {
            $('#AutoGrParent').addClass('active');
        }

        setupDataTables();

        $(document).on('click', '#btn-filter', function () {
            var table = $('#tbEpaf').DataTable();
            table.ajax.reload();
        });

        $(document).on('click', '#btn-reset', function () {

            $(".form-control").val("");

            var todayDate = new Date();
            todayDate.setHours(00, 00, 00, 00);
            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            var todayDatestr = todayDate.getDate() + '-' + (months[todayDate.getMonth()]) + '-' + todayDate.getFullYear();

            var date = new Date();
            date.setDate(1);
            date.setHours(00, 00, 00, 00);
            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            var datestr = date.getDate() + '-' + (months[date.getMonth()]) + '-' + date.getFullYear();


            $('#PeriodStart').val(datestr);
            $('#PeriodEnd').val(todayDatestr);
            $("#btn-filter").trigger('click');
        });
    });
</script>