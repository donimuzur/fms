@model FMS.Website.Models.FleetModel
@using FMS.Core;
<div class="opt-content clearfloat">
    <h5 class="title-page">Vehicles Report</h5>
    @if (Model.CurrentPageAccess.ReadAccess == true)
    {
        <a href="#!" class="btn btn-primary line" id="btnExport" title="Export To Excel" onclick="ExportXls()">
            <i class="fa fa-upload"></i> Export
        </a>
    }
</div>

<section class="content">
    <div class="wpanel">
        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_CityList">Police Number</label>
                    @Html.DropDownListFor(model => model.SearchView.PoliceNumber, Model.SearchView.PoliceNumberList, "select", new { @class = "form-control chosen", @data_live_search = true })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_CityList">Employee Name</label>
                    @Html.DropDownListFor(model => model.SearchView.EmployeeName, Model.SearchView.EmployeeNameList, "select", new { @class = "form-control chosen", @data_live_search = true })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_CityList">Engine Number</label>
                    @Html.DropDownListFor(model => model.SearchView.EngineNumber, Model.SearchView.EngineNumberList, "select", new { @class = "form-control chosen", @data_live_search = true })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_CityList">Employee ID</label>
                    @Html.DropDownListFor(model => model.SearchView.EmployeeID, Model.SearchView.EmployeeIDList, "select", new { @class = "form-control chosen", @data_live_search = true })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_CityList">Chasis Number</label>
                    @Html.DropDownListFor(model => model.SearchView.ChasisNumber, Model.SearchView.ChasisNumberList, "select", new { @class = "form-control chosen", @data_live_search = true })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_Status">Status</label>
                    @Html.DropDownListFor(model => model.SearchView.StatusSource, Model.SearchView.StatusList, "select", new { @class = "form-control chosen", @data_live_search = true })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_SupplyMethodList">Supply Method</label>
                    @Html.DropDownListFor(model => model.SearchView.SupplyMethod, Model.SearchView.SupplyMethodList, new { @class = "form-control chosen", @data_live_search = true, @multiple = "multiple" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_BodyTypeList">Body Type</label>
                    @Html.DropDownListFor(model => model.SearchView.BodyType, Model.SearchView.BodyTypeList, new { @class = "form-control chosen", @data_live_search = true, @multiple = "mulltiple" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_VehicleTypeList">Vehicle Type</label>
                    @if (Model.CurrentLogin.UserRole == Enums.UserRole.Viewer || Model.CurrentLogin.UserRole == Enums.UserRole.EHS 
                        || Model.CurrentLogin.UserRole == Enums.UserRole.Fleet || Model.CurrentLogin.UserRole == Enums.UserRole.Administrator 
                        || Model.CurrentLogin.UserRole == Enums.UserRole.IsSupport || Model.CurrentLogin.UserRole == Enums.UserRole.FleetManager)
                    {
                        @Html.DropDownListFor(model => model.SearchView.VehicleType, Model.SearchView.VehicleTypeList, "select", new { @class = "form-control chosen", @data_live_search = true })
                    }
                    else if (Model.CurrentLogin.UserRole == Enums.UserRole.FinanceZone || Model.CurrentLogin.UserRole == Enums.UserRole.ComFinanceManager
                        || Model.CurrentLogin.UserRole == Enums.UserRole.Logistic|| Model.CurrentLogin.UserRole == Enums.UserRole.OpsFinanceManager
                        || Model.CurrentLogin.UserRole == Enums.UserRole.LDManager)
                    {
                        @Html.TextBox("SearchView_VehicleType","WTC", new { @class = "form-control", @readonly="readonly"})
                    }
                    else if (Model.CurrentLogin.UserRole == Enums.UserRole.HR || Model.CurrentLogin.UserRole == Enums.UserRole.HRManager)
                    {
                        @Html.TextBox("SearchView_VehicleType", "BENEFIT", new { @class = "form-control", @readonly = "readonly" })
                    }
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_VehicleUsageList">Vehicle Usage</label>
                    @Html.DropDownListFor(model => model.SearchView.VehicleUsage, Model.SearchView.VehicleUsageList, new { @class = "form-control chosen", @data_live_search = true, @multiple = "multiple" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_VendorList">Vendor Name</label>
                    @Html.DropDownListFor(model => model.SearchView.Vendor, Model.SearchView.VendorList, new { @class = "form-control chosen", @data_live_search = true, @multiple = "multiple" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_FunctionList">Function</label>
                    @if (Model.CurrentLogin.UserRole == Enums.UserRole.Viewer || Model.CurrentLogin.UserRole == Enums.UserRole.EHS
                || Model.CurrentLogin.UserRole == Enums.UserRole.Fleet || Model.CurrentLogin.UserRole == Enums.UserRole.HR
                || Model.CurrentLogin.UserRole == Enums.UserRole.Administrator || Model.CurrentLogin.UserRole == Enums.UserRole.IsSupport
                || Model.CurrentLogin.UserRole == Enums.UserRole.FleetManager || Model.CurrentLogin.UserRole == Enums.UserRole.HRManager)
                    {
                        @Html.DropDownListFor(model => model.SearchView.Function, Model.SearchView.FunctionList, new { @class = "form-control chosen", @data_live_search = true, @multiple = "multiple" })
                    }
                    else if (Model.CurrentLogin.UserRole == Enums.UserRole.FinanceZone || Model.CurrentLogin.UserRole == Enums.UserRole.ComFinanceManager)
                    {
                        @Html.TextBox("SearchView_Function", "Sales,Marketing", new { @class = "form-control", @readonly = "readonly" })
                    }
                    else if (Model.CurrentLogin.UserRole == Enums.UserRole.OpsFinanceManager)
                    {
                        @Html.TextBox("SearchView_Function", "Operations", new { @class = "form-control", @readonly = "readonly" })
                    }
                    else if (Model.CurrentLogin.UserRole == Enums.UserRole.Logistic || Model.CurrentLogin.UserRole == Enums.UserRole.LDManager)
                    {
                        @Html.TextBox("SearchView_Function", "Logistic", new { @class = "form-control", @readonly = "readonly" })
                    }
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_RegionalList">Regional</label>
                    @Html.DropDownListFor(model => model.SearchView.Regional, Model.SearchView.RegionalList, new { @class = "form-control chosen", @data_live_search = true, @multiple = "multiple" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_CityList">Basetown</label>
                    @Html.DropDownListFor(model => model.SearchView.City, Model.SearchView.CityList, new { @class = "form-control chosen", @data_live_search = true, @multiple = "multiple" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_StartRent">Start Contract From</label>
                    @Html.TextBoxFor(model => model.SearchView.StartRent, new { @class = "form-control date-begin" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_StartRent">Start Contract To</label>
                    @Html.TextBoxFor(model => model.SearchView.StartRentTo, new { @class = "form-control date-begin" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_EndRent">End Contract From</label>
                    @Html.TextBoxFor(model => model.SearchView.EndRent, new { @class = "form-control date-end" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_EndRent">End Contract To</label>
                    @Html.TextBoxFor(model => model.SearchView.EndRentTo, new { @class = "form-control date-end" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_EndRent">End Date From</label>
                    @Html.TextBoxFor(model => model.SearchView.EndDate, new { @class = "form-control date-end" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="SearchView_EndRent">End Date To</label>
                    @Html.TextBoxFor(model => model.SearchView.EndDateTo, new { @class = "form-control date-end" })
                </div>
            </div>
            @if (Model.CurrentLogin.UserRole == Enums.UserRole.FinanceZone || Model.CurrentLogin.UserRole == Enums.UserRole.Logistic)
            {
                <div class="col-md-3">
                    <div class="form-group">
                        <label for="SearchView_Zone">Zone</label>
                        @Html.TextBoxFor(model => model.SearchView.Zone, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.SearchView.Zone)
            }
            <div class="clearfix"></div>
            <div class="col-md-12">
                <button id="btn-filter" type="button" class="btn btn-primary">Filter</button>
                <button id="btn-reset" type="button" class="btn btn-default">Reset</button>
            </div>
        </div>
    </div>
    <div class="wpanel">
        @Html.Partial("_ListVehicleOverall")
    </div>
</section>
<div id="LoadingModal" class="modal" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <div align="center">
                    <img src="~/Content/img/loader2.gif" id="imgLoader" style="display:block" />
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/thousand-separator.js"></script>
<script src="~/Scripts/VehicleOverall.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
<script type="text/javascript" language="javascript" class="init">
    jQuery(function ($) {
        // DataTable
        /*var table = $('#tbFleet').DataTable({
            "dom": 'lf<"table-overflow"t>pi',
            orderCellsTop: true
        });

        // Apply the search
        table.columns().eq(0).each(function (colIdx) {
            $('input', $('.filters th')[colIdx]).on('keyup change', function () {
                table
                    .column(colIdx)
                    .search(this.value)
                    .draw();
            });
        });*/
        if ($('.title-page').html() == 'Vehicles Report') {
            $('#MstFleetMenu').addClass('active');
        }

        $(".chosen").chosen();

        setupDataTables();

        $(document).on('click', '#btn-filter', function () {
            var table = $('#tbFleet').DataTable();

            table.ajax.reload();
        });

        $(document).on('click', '#btn-reset', function () {
            $('input[type=text]').val('');
        	//$('.chosen-single > span').html('select');
            $('#SearchView_Function').val('').trigger('chosen:updated');
            $("#SearchView_SupplyMethod").val('').trigger('chosen:updated');
            $("#SearchView_BodyType").val('').trigger('chosen:updated');
            $("#SearchView_VehicleUsage").val('').trigger('chosen:updated');
            $("#SearchView_Vendor").val('').trigger('chosen:updated');
            $("#SearchView_Regional").val('').trigger('chosen:updated');
            $("#SearchView_City").val('').trigger('chosen:updated');
            setupDataTables();
        });
    });
    function ExportXls() {
        console.log('Submitting');
    	var url = '@Url.Action("ExportMasterFleetGenerateReport", "RptVehicleOverall")';
    	var getFileUrl = '@Url.Action("GetExcelFile", "RptVehicleOverall")';
        console.log(url);
        var objToUpload =
			{
				SearchView: {
					StatusSource: $('#SearchView_StatusSource').val(),
					VehicleType: $('#SearchView_VehicleType').val(),
					VehicleUsage: getFunctionStr($('#SearchView_VehicleUsage').val()),
					SupplyMethod: getFunctionStr($('#SearchView_SupplyMethod').val()),
					BodyType: getFunctionStr($('#SearchView_BodyType').val()),
					Vendor:  getFunctionStr($('#SearchView_Vendor').val()),
					Function: getFunctionStr($('#SearchView_Function').val()),
					StartRent: $("#SearchView_StartRent").val(),
					StartRentTo: $("#SearchView_StartRentTo").val(),
					EndRent: $("#SearchView_EndRent").val(),
					EndRentTo: $("#SearchView_EndRentTo").val(),
					Regional: getFunctionStr($("#SearchView_Regional").val()),
					City: getFunctionStr($("#SearchView_City").val()),
					PoliceNumber: $("#SearchView_PoliceNumber").val(),
					EngineNumber: $("#SearchView_EngineNumber").val(),
					ChasisNumber: $("#SearchView_ChasisNumber").val(),
					EmployeeID: $("#SearchView_EmployeeID").val(),
					EmployeeName: $("#SearchView_EmployeeName").val(),
					EndDate: $("#SearchView_EndData").val(),
					EndDateTo: $("#SearchView_EndDateTo").val(),
				    Zone: $('#SearchView_Zone').val()
				}

			};
        $.ajax({
        	url: url,
        	data: JSON.stringify(objToUpload),
        	contentType:'application/json; charset=utf-8',
        	beforeSend:function(){
        		$('#LoadingModal').show();
        	},
        	success: function(response,status,jqxhr){
        		console.log("DONE");
        		window.location = getFileUrl + "?pathFile=" + response;
        		$('#LoadingModal').hide();
        	},
        	error: function(jqhxr){
        		console.log("ERROR");
        		console.log(jqhxr.responseText);
        		$('#LoadingModal').hide();
        	},
        	type:'POST'
        });

    }
    function setupColumns() {
        var columns = [
            { "data": "PoliceNumber", "orderable": false },
            { "data": "ChasisNumber", "orderable": false },
            { "data": "EngineNumber", "orderable": false },
            { "data": "EmployeeName", "orderable": false },
            { "data": "EmployeeID", "orderable": false },
            { "data": "CostCenter", "orderable": false },
            { "data": "Manufacturer", "orderable": false },
            { "data": "Models", "orderable": false },
            { "data": "Series", "orderable": false },
            { "data": "Transmission", "orderable": false },
            { "data": "BodyType", "orderable": false },
            { "data": "FuelType", "orderable": false },
            { "data": "Branding", "orderable": false },
            { "data": "Color", "orderable": false },
            {
                "data": "Airbag", "orderable": false, "render": function (datum, type, record) {
                    return (datum) ? "Yes" : "No";
                }
            },
            { "data": "VehicleYear", "orderable": false },
            { "data": "VehicleType", "orderable": true },
            { "data": "VehicleUsage", "orderable": true },
            {
                "data": "Project", "orderable": false, "render": function (datum, type, record) {
                    return (datum) ? "Yes" : "No";
                }
            },
            { "data": "ProjectName", "orderable": false },
            {
                "data": "StartContract", "orderable": true, "render": function (datum, type, record) {
                    return (datum) ? moment(datum).format("DD-MMM-YYYY") : "";
                }
            },
            {
                "data": "EndContract", "orderable": true, "render": function (datum, type, record) {
                    return (datum) ? moment(datum).format("DD-MMM-YYYY") : "";
                }
            },
            { "data": "VendorName", "orderable": true },
            { "data": "City", "orderable": true },
            { "data": "SupplyMethod", "orderable": true },
            {
                "data": "Restitution", "orderable": false, "render": function (datum, type, record) {
                    return (datum) ? "Yes" : "No";
                }
            },
            { "data": "MonthlyHMSInstallment", "orderable": false },
            { "data": "VatDecimal", "orderable": false },
            { "data": "PoNumber", "orderable": false },
            { "data": "PoLine", "orderable": false },
            { "data": "CarGroupLevel", "orderable": false },
            { "data": "GroupLevel", "orderable": false },
            { "data": "AssignedTo", "orderable": false },
            { "data": "Address", "orderable": false },
            {
                "data": "StartDate", "orderable": false, "render": function (datum, type, record) {
                    return (datum) ? moment(datum).format("DD-MMM-YYYY") : "";
                }
            },
            {
                "data": "EndDate", "orderable": false, "render": function (datum, type, record) {
                    return (datum) ? moment(datum).format("DD-MMM-YYYY") : "";
                }
            },
            {
                "data": "IsActive", "orderable": false, "render": function (datum, type, record) {
                    return (datum) ? "Active" : "InActive";
                }
            },
            { "data": "CertificateOwnership", "orderable": false },
            { "data": "Comments", "orderable": false },
            { "data": "Assets", "orderable": false },
            { "data": "TotalMonthlyCharge", "orderable": false },
            { "data": "Function", "orderable": false },
            { "data": "Regional", "orderable": false },
            { "data": "SalesCode", "orderable": false },
            { "data": "DocumentNumber", "orderable": false }
        ];

        return columns;
    }
    function getFunctionStr(arr){
    	var dataStr = "";
    	if(arr.length>0){
    		dataStr = arr.toString();
    	}
    	return dataStr;
    }
    function setupDataTables() {
        var actionHtml = '';
        var table = null;

        if ($.fn.dataTable.isDataTable('#tbFleet')) {
            table = $('#tbFleet').DataTable();
            table.destroy();
        }

        var WriteAccess = @Model.WriteAccess;
        var ReadAccess = @Model.ReadAccess;

        table = $('#tbFleet').DataTable({
            "sDom": 'lf<"table-overflow"t>pi',
            "sPaginationType": "full_numbers",
            "language": {
                "zeroRecords": "No records found",
                "infoFiltered": "(filtered from _MAX_ total records)"
            },
            "rowCallback": function(row, data, index) {
                actionHtml = '';
                actionHtml ="<a href='RptVehicleOverall/DetailsVehicle?id="+data.MstFleetId +"'>"+data.ChasisNumber+"</a>";
                var actionRow = $(row).find("td")[1];
                $(actionRow).html(actionHtml);
            },
            "serverSide": true,
            stateSave: true,
            //"processing": true,
            "paging": true,
            "deferRender": true,
            "columns": setupColumns(),
            "ajax": {
                "url": "@Url.Action("SearchFleetAjax", "RptVehicleOverall")",
                "type": "POST",
                "data": function(d) {
                    return $.extend({}, d, {
                        "PoliceNumber": $('#SearchView_PoliceNumber').val(),
                        "FormalName": $('#SearchView_EmployeeName').val(),
                        "EngineNumber": $('#SearchView_EngineNumber').val(),
                        "EmployeeId": $('#SearchView_EmployeeID').val(),
                        "ChasisNumber": $('#SearchView_ChasisNumber').val(),
                        "StatusSource": $('#SearchView_StatusSource').val(),
                        "SupplyMethod": getFunctionStr($('#SearchView_SupplyMethod').val()),
                        "BodyType": getFunctionStr($('#SearchView_BodyType').val()),
                        "VehicleType": $('#SearchView_VehicleType').val(),
                        "VehicleUsage": getFunctionStr($('#SearchView_VehicleUsage').val()),
                        "Vendor": getFunctionStr($('#SearchView_Vendor').val()),
                        "Function": getFunctionStr($('#SearchView_Function').val()),
                        "StartRent": $('#SearchView_StartRent').val(),
                        "StartRentTo": $('#SearchView_StartRentTo').val(),
                        "EndRent": $('#SearchView_EndRent').val(),
                        "EndRentTo": $('#SearchView_EndRentTo').val(),
                        "EndDate": $('#SearchView_EndDate').val(),
                        "EndDateTo": $('#SearchView_EndDateTo').val(),
                        "Regional": getFunctionStr($('#SearchView_Regional').val()),
                        "City": getFunctionStr($('#SearchView_City').val()),
                        "Zone": getFunctionStr($('#SearchView_Zone').val())
                    });
                }
            }
        });

        table.on('preXhr', function(e, settings, data) {
            $('#LoadingModal').show();
        });

        table.on('xhr', function(e, settings, data) {
            $('#LoadingModal').hide();
        });
    }
</script>